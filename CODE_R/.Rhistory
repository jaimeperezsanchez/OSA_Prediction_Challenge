# Use a lift object using caret function lift
lift_obj <- lift(Class ~ glm, data = for_lift, class = "Severe")
# Use ggplot to Plot ROC
ggplot(lift_obj$data) +
geom_line(aes(1 - Sp, Sn, color = liftModelVar)) +
scale_color_discrete(guide = guide_legend(title = "method"))
model$metric
model$perfNames
model$results
# Use ggplot to Plot ROC
ggplot(lift_obj$data) +
geom_line(aes(1 - Sp (False Positive), Sn (True Positive), color = liftModelVar)) +
scale_color_discrete(guide = guide_legend(title = "method"))
# Use ggplot to Plot ROC
ggplot(lift_obj$data) +
geom_line(aes(1 - Sp (False Positive), Sn (True Positive), color = liftModelVar)) +
scale_color_discrete(guide = guide_legend(title = "method"))
Input_file <- "Info_BDApnea_QuironMalaga_rev.xlsx"
Output_file <- "OSA_DB_UPM.xlsx"
Data_Directory <- "D:\\OSA_CaseStudy\\DATA\\"
library(readxl)
df_tmp <- read_excel(paste(Data_Directory, Input_file, sep = ""))
typeof(df_tmp)
is.data.frame(df_tmp)
class(df_tmp)
Input_file <- "Info_BDApnea_QuironMalaga_rev.xlsx"
# Clear the working space
rm(list=ls())
Input_file <- "Info_BDApnea_QuironMalaga_rev.xlsx"
Output_file <- "OSA_DB_UPM.xlsx"
Data_Directory <- "D:\\OSA_CaseStudy\\DATA\\"
library(readxl)
df_tmp <- read_excel(paste(Data_Directory, Input_file, sep = ""))
typeof(df_tmp)
is.data.frame(df_tmp)
### NOTE: ##############################################
# df_tmp is NOT only a data frame!
# use as.data.frame to avoid later problems
class(df_tmp)
df_tmp = as.data.frame(df_tmp)
class(df_tmp)
library(dplyr)
df_tmp1 <- select(df_tmp, Patient, Gender, IAH, Peso, Talla, Edad, PerCervical)
library(visdat)
vis_dat(df_tmp1)
Input_file <- "Info_BDApnea_QuironMalaga.xlsx"
Output_file <- "OSA_DB_UPM.xlsx"
Data_Directory <- "D:\\OSA_CaseStudy\\DATA\\"
library(readxl)
df_tmp <- read_excel(paste(Data_Directory, Input_file, sep = ""))
typeof(df_tmp)
is.data.frame(df_tmp)
### NOTE: ##############################################
# df_tmp is NOT only a data frame!
# use as.data.frame to avoid later problems
class(df_tmp)
df_tmp = as.data.frame(df_tmp)
class(df_tmp)
library(dplyr)
df_tmp1 <- select(df_tmp, Patient, Gender, IAH, Peso, Talla, Edad, PerCervical)
library(visdat)
vis_dat(df_tmp1)
Input_file <- "Info_BDApnea_QuironMalaga_rev.xlsx"
Output_file <- "OSA_DB_UPM.xlsx"
Data_Directory <- "D:\\OSA_CaseStudy\\DATA\\"
library(readxl)
df_tmp <- read_excel(paste(Data_Directory, Input_file, sep = ""))
typeof(df_tmp)
is.data.frame(df_tmp)
### NOTE: ##############################################
# df_tmp is NOT only a data frame!
# use as.data.frame to avoid later problems
class(df_tmp)
df_tmp = as.data.frame(df_tmp)
class(df_tmp)
library(dplyr)
df_tmp1 <- select(df_tmp, Patient, Gender, IAH, Peso, Talla, Edad, PerCervical)
library(visdat)
vis_dat(df_tmp1)
dim(df_tmp1)
names(df_tmp1)
sum(df_tmp1$Gender)
sum(df_tmp1$Gender==hombre)
View(df_tmp1)
sum(df_tmp1$Gender=='hombre')
sum(df_tmp1$Gender=='mujer')
summary(df_tmp1)
df_tmp1$Gender <- as.factor(df_tmp1$Gender)
summary(df_tmp1)
library(naniar)
# Now change -1 values for NA in all columns (i.e. variables)
df_tmp2 <- replace_with_na_all(df_tmp1,condition = ~.x == -1)
library(tidyr)
df_final <- df_tmp2 %>% drop_na()
summary(df_final)
df_final$Gender <- as.factor(df_final$Gender)
summary(df_final)
df_final <- df_tmp2 %>% drop_na()
library(writexl)
df_final <- df_final %>% rename(Weight = Peso,
Height = Talla,
Age = Edad,
Cervical = PerCervical)
vis_dat(df_final)
write_xlsx(df_final,
paste(Data_Directory, Output_file, sep = ""))
Input_file <- "OSA_DB_UPM.xlsx"
Data_Directory <- "D:\\OSA_CaseStudy\\DATA\\"
library(readxl)
df_OSA <- read_excel(paste(Data_Directory, Input_file, sep = ""))
df_OSA = as.data.frame(df_OSA)
names(df_OSA)
dim(df_OSA)
df_OSA$Gender = factor(df_OSA$Gender)
summary(df_OSA)
# See relations between variables
attach(df_OSA)
pairs(~ IAH + Gender + Weight + Height + Cervical + Age)
pairs(~ IAH + Gender + Weight + Height + Cervical + Age)
pairs(~ IAH + Gender + Weight + Height + Cervical + Age)
# FIRST
# install corrplot and then load it
library(corrplot)
df_OSA_C=df_OSA
df_OSA_C$Gender = as.numeric(df_OSA_C$Gender)
M <- cor(subset(df_OSA_C, select = - Patient))
corrplot(M, method="number")
corrplot(M, method="circle")
corrplot(M, method="number")
lm.fit=lm(IAH~Weight+Height+Cervical+Age+Gender)
summary(lm.fit)
### Male population
df_OSA_male=subset(df_OSA_C, Gender==1)
names(df_OSA_male)
attach(df_OSA_male)
lm_male.fit=lm(IAH~Height+Cervical+Age+Weight)
summary(lm_male.fit)
df_OSA_female=subset(df_OSA_C, Gender==2)
names(df_OSA_female)
attach(df_OSA_female)
lm_female.fit=lm(IAH~Height+Cervical+Age+Weight)
summary(lm_female.fit)
# BMI add a column
df_OSA_C$BMI <- with(df_OSA_C, Weight / (Height/100.0)^2)
attach(df_OSA_C)
lm.fit=lm(IAH~BMI+Cervical+Age)
summary(lm.fit)
########################################
########################################
########################################
########################################
########################################
####   NEXT STEPS:
########################################
########################################
####   NEXT STEPS:
####
########################################
########################################
####   NEXT STEPS:
####
####  You can try:
########################################
########################################
####   NEXT STEPS:
####
####  You can try:
####        - Regularization
########################################
########################################
####   NEXT STEPS:
####
####  You can try:
####        - Regularization
####        - Feature selection
########################################
########################################
####   NEXT STEPS:
####
####  You can try:
####        - Regularization
####        - Feature selection
####        - other Regression models
########################################
########################################
####   NEXT STEPS:
####
####  You can try:
####        - Regularization
####        - Feature selection
####        - other Regression models
####
########################################
########################################
####   NEXT STEPS:
####
####  You can try:
####        - Regularization
####        - Feature selection
####        - other Regression models
####
####  BUT you can wait to see Classification Script
rm(list=ls())
Input_file <- "OSA_DB_UPM.xlsx"
Output_file <- "OSA_extreme_male.xlsx"
Data_Directory <- "D:\\OSA_CaseStudy\\DATA\\"
library(readxl)
df_OSA <- read_excel(paste(Data_Directory, Input_file, sep = ""))
df_OSA = as.data.frame(df_OSA)
names(df_OSA)
dim(df_OSA)
## We will begin considering male subjets
### Male population
df_OSA_male=subset(df_OSA, Gender=="hombre")
# We will use dplyr library (mutate operator)
library(dplyr)
df_OSA_male <- df_OSA_male %>%
mutate(OSA = ifelse(IAH <= 10, "Healthy",
ifelse(IAH>=30, "Severe", "Mild")))
df_OSA_male <- df_OSA_male %>% filter(OSA != "Mild")
df_OSA_male$OSA = factor(df_OSA_male$OSA)
# Add BMI column
df_OSA_male$BMI <-
with(df_OSA_male, Weight / (Height/100.0)^2)
summary(df_OSA_male)
library(writexl)
write_xlsx(df_OSA_male,
paste(Data_Directory, Output_file, sep = ""))
cor(df_OSA_male[,3:7])
# for examle a visualization
library(corrplot)
correlations = cor(df_OSA_male[,3:7])
corrplot(correlations, method="color")
# for examle a visualization
library(corrplot)
correlations = cor(df_OSA_male[,3:7])
corrplot(correlations, method="color")
corrplot(correlations, method="color")
corrplot(correlations, method="color")
library(lattice)
correlations = cor(df_OSA_male[,3:7])
corrplot(correlations, method="color")
corrplot(correlations, method="color")
rm(list=ls())
Input_file <- "OSA_DB_UPM.xlsx"
Output_file <- "OSA_extreme_male.xlsx"
Data_Directory <- "D:\\OSA_CaseStudy\\DATA\\"
library(readxl)
df_OSA <- read_excel(paste(Data_Directory, Input_file, sep = ""))
df_OSA = as.data.frame(df_OSA)
names(df_OSA)
dim(df_OSA)
## We will begin considering male subjets
### Male population
df_OSA_male=subset(df_OSA, Gender=="hombre")
View(df_OSA)
# Clear the working space
rm(list=ls())
Input_file <- "Info_BDApnea_QuironMalaga.xlsx"
Output_file <- "OSA_DB_UPM.xlsx"
Data_Directory <- "D:\\OSA_CaseStudy\\DATA\\"
library(readxl)
df_tmp <- read_excel(paste(Data_Directory, Input_file, sep = ""))
typeof(df_tmp)
is.data.frame(df_tmp)
### NOTE: ##############################################
# df_tmp is NOT only a data frame!
# use as.data.frame to avoid later problems
class(df_tmp)
df_tmp = as.data.frame(df_tmp)
class(df_tmp)
library(dplyr)
df_tmp1 <- select(df_tmp, Patient, Gender, IAH, Peso, Talla, Edad, PerCervical)
library(visdat)
vis_dat(df_tmp1)
library(naniar)
# Now change -1 values for NA in all columns (i.e. variables)
df_tmp2 <- replace_with_na_all(df_tmp1,condition = ~.x == -1)
library(tidyr)
df_final <- df_tmp2 %>% drop_na()
library(writexl)
df_final <- df_final %>% rename(Weight = Peso,
Height = Talla,
Age = Edad,
Cervical = PerCervical)
vis_dat(df_final)
write_xlsx(df_final,
paste(Data_Directory, Output_file, sep = ""))
Input_file <- "Info_BDApnea_QuironMalaga_rev.xlsx"
Output_file <- "OSA_DB_UPM.xlsx"
Data_Directory <- "D:\\OSA_CaseStudy\\DATA\\"
library(readxl)
df_tmp <- read_excel(paste(Data_Directory, Input_file, sep = ""))
typeof(df_tmp)
is.data.frame(df_tmp)
### NOTE: ##############################################
# df_tmp is NOT only a data frame!
# use as.data.frame to avoid later problems
class(df_tmp)
df_tmp = as.data.frame(df_tmp)
class(df_tmp)
library(dplyr)
df_tmp1 <- select(df_tmp, Patient, Gender, IAH, Peso, Talla, Edad, PerCervical)
library(visdat)
vis_dat(df_tmp1)
library(naniar)
# Now change -1 values for NA in all columns (i.e. variables)
df_tmp2 <- replace_with_na_all(df_tmp1,condition = ~.x == -1)
library(tidyr)
df_final <- df_tmp2 %>% drop_na()
library(writexl)
df_final <- df_final %>% rename(Weight = Peso,
Height = Talla,
Age = Edad,
Cervical = PerCervical)
vis_dat(df_final)
write_xlsx(df_final,
paste(Data_Directory, Output_file, sep = ""))
rm(list=ls())
Input_file <- "OSA_DB_UPM.xlsx"
Output_file <- "OSA_extreme_male.xlsx"
Data_Directory <- "D:\\OSA_CaseStudy\\DATA\\"
library(readxl)
df_OSA <- read_excel(paste(Data_Directory, Input_file, sep = ""))
df_OSA = as.data.frame(df_OSA)
names(df_OSA)
dim(df_OSA)
## We will begin considering male subjets
### Male population
df_OSA_male=subset(df_OSA, Gender=="hombre")
# We will use dplyr library (mutate operator)
library(dplyr)
df_OSA_male <- df_OSA_male %>%
mutate(OSA = ifelse(IAH <= 10, "Healthy",
ifelse(IAH>=30, "Severe", "Mild")))
df_OSA_male <- df_OSA_male %>% filter(OSA != "Mild")
df_OSA_male$OSA = factor(df_OSA_male$OSA)
# Add BMI column
df_OSA_male$BMI <-
with(df_OSA_male, Weight / (Height/100.0)^2)
summary(df_OSA_male)
library(writexl)
write_xlsx(df_OSA_male,
paste(Data_Directory, Output_file, sep = ""))
cor(df_OSA_male[,3:7])
# for examle a visualization
library(corrplot)
correlations = cor(df_OSA_male[,3:7])
corrplot(correlations, method="color")
corrplot(correlations, method="numbers")
corrplot(correlations, method="number")
library(lattice)
# Each group in a separate mini plot
xyplot(BMI ~ Age | OSA, data = df_OSA_male)
xyplot(BMI ~ Age ,
groups =  OSA, data = df_OSA_male,
auto.key = list(corner = c(1, 1), cex = 0.7))
library(ggplot2)
ggplot(df_OSA_male, aes(x = BMI)) +
geom_histogram(aes(color = OSA), fill = "white",
position = "identity", bins = 30, alpha = 0.1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
scale_fill_manual(values = c("#00AFBB", "#E7B800"))
ggplot(df_OSA_male, aes(x = BMI)) +
geom_histogram(aes(color = OSA), fill = "white",
position = "identity", bins = 30, alpha = 0.1) +
scale_color_manual(values = c("#AFBB", "#E7B800")) +
scale_fill_manual(values = c("#00AFBB", "#E7B800"))
ggplot(df_OSA_male, aes(x = BMI)) +
geom_histogram(aes(color = OSA), fill = "white",
position = "identity", bins = 30, alpha = 0.1) +
scale_color_manual(values = c("#0aAFBB", "#E7B800")) +
scale_fill_manual(values = c("#00AFBB", "#E7B800"))
ggplot(df_OSA_male, aes(x = BMI)) +
geom_histogram(aes(color = OSA), fill = "white",
position = "identity", bins = 30, alpha = 0.1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
scale_fill_manual(values = c("#00AFBB", "#E7B800"))
ggplot(df_OSA_male, aes(x = BMI)) +
geom_histogram(aes(color = OSA), fill = "white",
position = "identity", bins = 30, alpha = 0.1) +
scale_color_manual(values = c("#00AF00", "#E7B800")) +
scale_fill_manual(values = c("#00AFBB", "#E7B800"))
ggplot(df_OSA_male, aes(x = BMI)) +
geom_histogram(aes(color = OSA), fill = "white",
position = "identity", bins = 30, alpha = 0.1) +
scale_color_manual(values = c("#00AF00", "#E7B800")) +
scale_fill_manual(values = c("#00AF00", "#E7B800"))
rm(list=ls())
Input_file <- "OSA_extreme_male.xlsx"
Data_Directory <- "D:\\OSA_CaseStudy\\DATA\\"
library(readxl)
df_OSA_male <- read_excel(paste(Data_Directory, Input_file, sep = ""))
summary(df_OSA_male)
# Define OSA column as a factor for being used be
# classification models
df_OSA_male$OSA = factor(df_OSA_male$OSA)
# Using contrasts you can see how the levels of
# the factors will be coded when fitting the model
contrasts(df_OSA_male$OSA)
glm.fit=glm(OSA~BMI+Age+Cervical,data=df_OSA_male,
family=binomial)
summary(glm.fit)
coef(glm.fit)
summary(glm.fit)$coef
glm.probs=predict(glm.fit,type="response")
glm.probs[1:10]
contrasts(df_OSA_male$OSA)
df_OSA_male$IAH[1:10]
### !!! NOTE that this depends on the result of the
###     assignment : see contrasts
glm.pred=rep("Healthy",278)
glm.pred[glm.probs>.5]="Severe"
# table() can be used to obtain a CONFUSSION MATRIX
table(glm.pred,df_OSA_male$OSA)
sum(df_OSA_male$OSA=='Healthy')
sum(df_OSA_male$OSA=='Severe')
mean(glm.pred==df_OSA_male$OSA)
df_OSA_male$Probs <- glm.probs
library(ggplot2)
ggplot(df_OSA_male, aes(x = Probs)) +
geom_histogram(aes(color = OSA), fill = "white",
position = "identity", bins = 30, alpha = 0.1) +
scale_color_manual(values = c("#00AFBB", "#E7B800")) +
scale_fill_manual(values = c("#00AFBB", "#E7B800"))
predict(glm.fit,newdata=data.frame(BMI=c(22,32),
Age=c(30,60),
Cervical=c(40,45)),type="response")
# for example, take 200 randomly selected samples for training
train = sample(278,200)
df_OSA_male_train=df_OSA_male[train,]
df_OSA_male_test=df_OSA_male[-train,]
glm.fit=glm(OSA~BMI+Age+Cervical,data=df_OSA_male_train,
family=binomial)
# Predic the TEST data
glm.probs_test=predict(glm.fit,df_OSA_male_test,type="response")
glm.pred_test=rep("Healthy",dim(df_OSA_male_test)[1])
glm.pred_test[glm.probs_test>.5]="Severe"
# table() can be used to obtain a CONFUSSION MATRIX
table(glm.pred_test,df_OSA_male_test$OSA)
mean(glm.pred_test==df_OSA_male_test$OSA)
# Predic the TRAIN data
glm.probs_train=predict(glm.fit,df_OSA_male_train,type="response")
glm.pred_train=rep("Healthy",dim(df_OSA_male_train)[1])
glm.pred_train[glm.probs_train>.5]="Severe"
# table() can be used to obtain a CONFUSSION MATRIX
table(glm.pred_train,df_OSA_male_train$OSA)
mean(glm.pred_train==df_OSA_male_train$OSA)
## IF NOT INSTALLED, INSTALL THE CARET Package
library(caret)
# define an 80%/20% train/test split of the dataset
split=0.80
trainIndex <- createDataPartition(df_OSA_male$OSA, p=split, list=FALSE)
data_train <- df_OSA_male[ trainIndex,]
data_test <- df_OSA_male[-trainIndex,]
library(klaR)
model <- NaiveBayes(OSA~BMI+Age+Cervical, data=data_train)
# make predictions on TEST data
predictions <- predict(model, data_test)
# summarize results
confusionMatrix(predictions$class, data_test$OSA)
# define training control
train_control <- trainControl(method="cv", number=10,
summaryFunction=twoClassSummary,
classProbs=T,
savePredictions = T)
# train the model
model <- train(OSA~BMI+Age+Cervical, data=df_OSA_male,
trControl=train_control, method="glm",
metric = 'ROC'
)
# summarize results
print(model)
# See final model
model$finalModel
model$pred$obs
for_lift <- data.frame(Class = model$pred$obs,  glm = model$pred$Severe)
# Use a lift object using caret function lift
lift_obj <- lift(Class ~ glm, data = for_lift, class = "Severe")
# Use ggplot to Plot ROC
ggplot(lift_obj$data) +
geom_line(aes(1 - Sp, Sn , color = liftModelVar)) +
scale_color_discrete(guide = guide_legend(title = "method"))
######### Let's try KNN with hyperparameter selection (value of k)
#         using grid search (consider also rando, bayesian... optimization)
#
#   For example:  k= 3,5,7,...15  (expand.grid creates a data frame)
k_values <- expand.grid(k = seq(3, 15, 2))
# Train control CV k´fold=10
train_control <- trainControl(method='cv',
number = 10)
# Training the model for hyperparameter selection using cross validation
knn.model <- train(OSA~BMI+Age+Cervical,
data=df_OSA_male,
method = 'knn',
tuneGrid = k_values,
trControl = train_control)
knn.model
# define training control
RF_train_control <- trainControl(method="cv", number=10,
savePredictions = TRUE,
classProbs = TRUE,
verboseIter = TRUE)
randomForest.model = train(OSA~BMI+Age+Cervical,
data=df_OSA_male,
method = "rf",
trControl = RF_train_control,
preProcess = c("center","scale"),
ntree = 400)
randomForest.model
randomForest.model$finalModel
randomForest.model$finalModel$importance
